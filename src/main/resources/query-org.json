{
	"getOrgByGuid":"MATCH (or:org {guid:{guid}}) RETURN or",
	
	"orgHasOrg":"MATCH (s:org {guid:{src}}),(d:org {guid:{dest}}) MERGE (s)-[r:has]->(d) RETURN r as rid",
	
	"orgBelongsOrg":"MATCH (s:org {guid:{src}}),(d:org {guid:{dest}}) MERGE (s)-[r:belongs]->(d) RETURN r as rid",
	
	"orgHasDataShard":"MATCH (s:org {guid:{src}}),(d:data_shard {guid:{dest}}) MERGE (s)-[r:has]->(d) RETURN r as rid",
	
	"orgIsContract":"MATCH (s:org {guid:{src}}),(d:contract {guid:{dest}}) MERGE (s)-[r:is]->(d) RETURN r as rid",
	
	"isParentConnectedToChild":"MATCH (s:SRC_LBL {guid:{src}})-[r:REL]->(d{name:{name},type:{type}}) RETURN DISTINCT (CASE WHEN d IS NOT NULL THEN true ELSE false END) AS st",
	
	"orgHasContract":"MATCH (s:org {guid:{src}}),(d:contract {guid:{dest}}) MERGE (s)-[r:has]->(d) RETURN r as rid",
	
	"getBootStrapKey":"MATCH(pc:product_class{name:{prdtName}})<-[:is]-(ast:asset{serial_number:{serialNumber}})-[:belongs*]->(or:org) WHERE or.boot_strap_key IS NOT NULL RETURN or,'org' as lbl LIMIT 1",
	
	"getBootStrapKeyV2":"MATCH (or:org{boot_strap_key:{bootStrapKey}}) RETURN LABELS(or) AS lbl,or",
	
	"getImmediateOrgOfAsset":"MATCH paths=(or:org{guid:{src}})-[:has*]->(at:asset{guid:{dest}}) RETURN paths",
	
	"getBootStrapKeyByOrgAndSrn":"MATCH (at:asset{serial_number:{src}})-[:belongs*]->(or:org{name:{dest}}) RETURN or.boot_strap_key AS btskey",
	
	"getOrgsByUser":"MATCH (ct:contract{guid:{guid}})<-[:has]-(orA:org)-[:has*]->(orn:org) RETURN DISTINCT LABELS(orA)[0] AS lbl,orA,orn",
	
	"getOrgsByType":"MATCH (ct:contract{guid:{contractGuid}})<-[:has]-(:org)-[:has*]->(or:org{type:{type}})-[:has*]->(ast:asset{guid:{assetGuid}}) RETURN DISTINCT LABELS(or)[0] AS lbl,or",
	
	"detachDeleteNode":"MATCH (or:org{guid:{guid}}) DETACH DELETE or",
	
	"createLink":"MATCH (s:SRC_LBL {guid:{src}}),(d:DEST_LBL {guid:{dest}}) MERGE (s)-[r:REL]->(d) RETURN r as rid"
	
}