{
	"contractTypeHasContract":"MATCH (s:contract_type {guid:{src}}),(d:contract {guid:{dest}}) MERGE (s)-[r:has]->(d) RETURN r as rid",
	
	"contractTypeIsContractType":"MATCH (s:contract_type {guid:{src}}),(d:contract_type {guid:{dest}}) MERGE (s)-[r:is]->(d) RETURN r as rid",
	
	"getContractTypeByGuid":"MATCH (ctt:contract_type {guid:{guid}}) RETURN ctt",
	
	"getContractTypeByToken":"MATCH (ctt:contract_type {auth_token:{authToken}}) RETURN ctt",
	
	"contractTypeHasTermData":"MATCH (s:contract_type {guid:{src}}),(d:term_data {guid:{dest}}) MERGE (s)-[r:has]->(d) RETURN r as rid",
	
	"contractTypeHasTermEvent":"MATCH (s:contract_type {guid:{src}}),(d:term_event {guid:{dest}}) MERGE (s)-[r:has]->(d) RETURN r as rid",
	
	"contractTypeHasTermEventType":"MATCH (s:contract_type {guid:{src}}),(d:term_event_type {guid:{dest}}) MERGE (s)-[r:has]->(d) RETURN r as rid",
	
	"contractTypeHasTermAction":"MATCH (s:contract_type {guid:{src}}),(d:term_action {guid:{dest}}) MERGE (s)-[r:has]->(d) RETURN r as rid",
	
	"contractTypeHasTermActionType":"MATCH (s:contract_type {guid:{src}}),(d:term_action_type {guid:{dest}}) MERGE (s)-[r:has]->(d) RETURN r as rid",
	
	"contractTypeHasTermService":"MATCH (s:contract_type {guid:{src}}),(d:term_service {guid:{dest}}) MERGE (s)-[r:has]->(d) RETURN r as rid",
	
	"contractTypeInHasClassVertices":"MATCH (ctt:contract_type{guid:{guid}})<-[:has]-(v:class) WHERE v.category IS NOT NULL RETURN LABELS(v)[0] AS lbl,v.guid AS guid,v.name AS name",

	"contractTypeIsDerivedClass":"MATCH (s:SRC_LBL {guid:{src}}),(d:contract_type {guid:{dest}}) MERGE (s)-[r:isderived]->(d) RETURN r as rid",
	
	"contractTypeHasTermMashUp":"MATCH (s:contract_type {guid:{src}}),(d:term_mashup {guid:{dest}}) MERGE (s)-[r:has]->(d) RETURN r as rid",
	
	"getProductClassesByContractType":"MATCH (c:contract_type {guid:{contractTypeId}})<-[r:has]-(x:class)<-[:is*]-(pc:product_class) RETURN pc",
  	
  "getContractTypeInIsContractType":"MATCH (c:contract_type {guid:{contractTypeId}})<-[:is]-(ct:contract_type) RETURN ct,LABELS(ct)[0] AS lbl",
		
	"personAppContractTypes" : "MATCH p=(pr:principal{principal_id:{principalId}})-[:belongs]->(ad:admin_unit)<-[:has]-(ct:contract)<-[:has]-(ctt:contract_type)<-[:has]-(ap:app) RETURN ctt"	
	
	
}